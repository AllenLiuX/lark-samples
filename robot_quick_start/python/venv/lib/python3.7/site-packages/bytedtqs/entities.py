# coding: utf-8
from __future__ import absolute_import, division, print_function, unicode_literals

import json
from typing import Any, Callable, Dict, Iterator, List, Optional, Text


class JobStatus(object):
    """
    任务状态
    """

    AnalysisFailed = "AnalysisFailed"
    AnalysisCompleted = "AnalysisCompleted"
    Completed = "Completed"
    Cancelled = "Cancelled"
    Failed = "Failed"


class EngineType(object):
    """
    引擎类型
    """

    Hive = "Hive"
    Spark = "Spark"
    HiveCli = "HiveCli"
    SparkCli = "SparkCli"
    Presto = "Presto"
    ClickHouse = "ClickHouse"


class DictBasedObject(object):
    def __init__(self, _raw_dict):
        # type: (Dict[Text, Any]) -> None
        """
        dict based object

        :type _raw_dict: Dict[Text, Any]
        """
        self._raw_dict = _raw_dict


class JobEntity(DictBasedObject):
    """
    任务描述
    """

    def __init__(self, _raw_dict, _get_query_result):
        # type: (Dict[Text, Any], Callable[[JobEntity], QueryResultEntity]) -> None
        """
        :type _raw_dict: Dict[Text, Any]
        :type _get_query_result: (JobEntity) -> QueryResultEntity
        """
        super(JobEntity, self).__init__(_raw_dict)
        self._get_query_result = _get_query_result

    @property
    def id(self):
        # type: () -> Optional[int]
        """
        任务ID

        :rtype: Optional[int]
        """
        return self._raw_dict.get("id")

    @property
    def status(self):
        # type: () -> Optional[Text]
        """
        任务状态

        :rtype: Optional[Text]
        """
        return self._raw_dict.get("status")

    @property
    def engine_type(self):
        # type: () -> Optional[Text]
        """
        引擎类型

        :rtype: Optional[Text]
        """
        return self._raw_dict.get("engineType")

    @property
    def _progress(self):
        # type: () -> Dict[Text, Any]
        """
        progress dict

        :rtype: Dict[Text, Any]
        """
        return json.loads(self._raw_dict.get("progress", "{}"))

    @property
    def analysis_error_message(self):
        # type: () -> Optional[Text]
        """
        解析报错信息(已废弃，建议使用extra_message())

        :rtype: Optional[Text]
        """
        return self._progress.get('extraInfo')

    @property
    def extra_message(self):
        # type: () -> Optional[Text]
        """
        运行过程中额外信息

        :rtype: Optional[Text]
        """
        return self._progress.get('extraInfo')

    @property
    def query_error_url(self):
        # type: () -> Optional[Text]
        """
        执行报错信息日志文件下载链接

        :rtype: Optional[Text]
        """
        return self._raw_dict.get('logUrl')

    @property
    def query_error_stream_url(self):
        # type: () -> Optional[Text]
        """
        执行日志异常信息，内容和query_error_url()一样，但是会直接返回报错信息内容而不是下载文件，推荐使用这个方法

        :rtype: Optional[Text]
        """
        log_url = self._raw_dict.get('logUrl')
        if log_url:
            return log_url.replace("results", "logs")
        else:
            return log_url

    @property
    def query_log_url(self):
        # type: () -> Optional[Text]
        """
        执行日志下载链接

        :rtype: Optional[Text]
        """
        return self._raw_dict.get('queryLogUrl')

    @property
    def result_schema(self):
        # type: () -> Optional[List[List[Text]]]
        """
        结果字段类型: [[column_name, column_type], ...]

        :rtype: Optional[List[List[Text]]]
        """
        return self._raw_dict.get("resultSchema")

    @property
    def tracking_urls(self):
        # type: () -> List[Text]
        """
        tracking url list

        :rtype: Optional[Text]
        """
        res = self._progress.get("trackingUrl")
        if res is None:
            return []
        return res.split(";")

    def get_result(self):
        # type: () -> QueryResultEntity
        """
        获取任务结果

        :rtype: QueryResultEntity
        """
        return self._get_query_result(self)

    def is_finished(self):
        # type: () -> bool
        """
        任务是否结束

        :rtype: bool
        """
        return self.is_failed() or self.is_success()

    def is_failed(self):
        # type: () -> bool
        """
        任务是否失败 (包括解析失败、执行失败以及被取消)

        :rtype: bool
        """
        return self.status in {JobStatus.AnalysisFailed, JobStatus.Failed, JobStatus.Cancelled}

    def is_success(self):
        # type: () -> bool
        """
        任务是否成功

        :rtype: bool
        """
        return self.status == JobStatus.Completed

    def is_cancelled(self):
        # type: () -> bool
        """
        任务是否被取消

        :rtype: bool
        """
        return self.status == JobStatus.Cancelled


class QueryResultEntity(DictBasedObject):
    """
    查询结果
    """

    def __init__(self, _raw_dict, _job, _csv_result_iterator):
        # type: (Dict[Text, Any], JobEntity, Callable[[QueryResultEntity], Iterator[List[Text]]]) -> None
        """
        :type _raw_dict: Dict[Text, Any]
        :type _job: JobEntity
        :type _csv_result_iterator: (QueryResultEntity) -> Iterator[List[Text]]
        """
        super(QueryResultEntity, self).__init__(_raw_dict)
        self._csv_result_iterator = _csv_result_iterator
        self._job = _job

    @property
    def sample_data(self):
        # type: () -> Optional[List[List[Text]]]
        """
        Sample 数据

        :rtype: Optional[List[List[Text]]]
        """
        return self._raw_dict.get("rows")

    @property
    def result_url(self):
        # type: () -> Optional[Text]
        """
        结果文件下载链接

        :rtype: Optional[Text]
        """
        return self._raw_dict.get("url")

    @property
    def result_url_gbk(self):
        # type: () -> Optional[Text]
        """
        结果文件下载链接 (GBK)

        :rtype: Optional[Text]
        """
        return self._raw_dict.get("urlGBK")

    @property
    def content_row_count(self):
        # type: () -> Optional[int]
        """
        数据行数（不含header）

        :rtype: Optional[int]
        """
        return self._raw_dict.get("rowCount")

    @property
    def file_size(self):
        # type: () -> Optional[int]
        """
        文件大小

        :rtype: Optional[int]
        """
        return self._raw_dict.get("fileSize")

    @property
    def with_header(self):
        # type: () -> Optional[bool]
        """
        结果是否包含 Header

        :rtype: Optional[bool]
        """
        return self._raw_dict.get("withHeader")

    def iter_all_data(self):
        # type: () -> Iterator[List[Text]]
        """
        所有数据的迭代器

        :rtype: Iterator[List[Text]]
        """
        return self._csv_result_iterator(self)

    def fetch_all_data(self):
        # type: () -> List[List[Text]]
        """
        下载所有数据

        :rtype: List[List[Text]]
        """
        return list(self.iter_all_data())


class AnalysisResultEntity(DictBasedObject):
    """
    解析结果
    """

    def __init__(self, _raw_dict):
        # type: (Dict[Text, Any]) -> None
        """
        :type _raw_dict: Dict[Text, Any]
        """
        super(AnalysisResultEntity, self).__init__(_raw_dict)

    @property
    def status(self):
        # type: () -> Optional[Text]
        """
        解析结果状态

        :rtype: Optional[Text]
        """
        return self._raw_dict.get("status")

    @property
    def extra_message(self):
        # type: () -> Optional[Text]
        """
        解析额外信息

        :rtype: Optional[Text]
        """
        return self._raw_dict.get("extraMessage")

    @property
    def error_message(self):
        # type: () -> Optional[Text]
        """
        报错信息

        :rtype: Optional[Text]
        """
        return self._raw_dict.get("error")

    @property
    def unauth_message(self):
        # type: () -> Optional[Text]
        """
        结构化的缺失权限信息

        :rtype: Optional[Text]
        """
        return self._raw_dict.get("unAuthMessage")

    @property
    def query_properties(self):
        # type: () -> Optional[list]
        """
        结构化的解析后 SQL 的属性

        :rtype: Optional[list]
        """
        return self._raw_dict.get("queryProperties")

    def is_failed(self):
        # type: () -> bool
        """
        解析是否失败

        :rtype: bool
        """
        return self.status == JobStatus.AnalysisFailed

    def is_success(self):
        # type: () -> bool
        """
        解析是否成功

        :rtype: bool
        """
        return self.status == JobStatus.AnalysisCompleted
