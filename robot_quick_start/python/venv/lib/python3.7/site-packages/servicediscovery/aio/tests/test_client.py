import os
import ipaddress

import pytest

from servicediscovery.aio.client import Client


class TestAsyncClient(object):
    @pytest.mark.asyncio
    async def test_client(self):
        client = Client()
        # /opt/tiger/consul_devbox/etc langfang.conf
        client._consul_host = "10.225.68.72"
        client._consul_port = 8002
        await client.get_one("al.test.testserver")

    @pytest.mark.asyncio
    async def test_v4v6_stack_query(self):
        client = Client()
        # /opt/tiger/consul_devbox/etc langfang.conf
        client._consul_host = "10.225.68.72"
        client._consul_port = 8002
        v4_preferred_psm = "al.test.testserver"
        v6_preferred_psm = "data.net.onet_be"
        # data.net.ibn_be in prod env is a dual-stack registered service

        # dual-stack sd, return result can be v4 or v6
        e = await client.get_one(v6_preferred_psm, address_family="dual-stack", dualstack_unique="v6")
        ipaddress.ip_address(e.host)
        e = await client.get_one(v4_preferred_psm, address_family="dual-stack", dualstack_unique="v4")
        ipaddress.ip_address(e.host)

        # single-stack sd
        e = await client.get_one(v4_preferred_psm, address_family="v4")
        ipaddress.IPv4Address(e.host)
        e = await client.get_one(v6_preferred_psm, address_family="v6")
        ipaddress.IPv6Address(e.host)

        # environment variables dependent sd
        os.environ["BYTED_HOST_IPV6"] = "fdbd:ff1:ce00:16:478:f476:c009:4d99"
        os.environ["BYTED_HOST_IPV4"] = "1.1.1.1"
        endpoints = await client.lookup_name(v6_preferred_psm)
        for endpoint in endpoints:
            # dual-stack, use v6 preferred
            assert isinstance(ipaddress.ip_address(endpoint.host), ipaddress.IPv6Address)

        os.environ["BYTED_HOST_IPV6"] = ""
        os.environ["BYTED_HOST_IPV4"] = "1.1.1.1"
        # no matter v4 / v6 service, we should only get v4 return in v4 only environment.
        endpoints = await client.lookup_name(v6_preferred_psm) + await client.lookup_name(v4_preferred_psm)
        for endpoint in endpoints:
            # v4 only
            assert isinstance(ipaddress.ip_address(endpoint.host), ipaddress.IPv4Address)

        os.environ["BYTED_HOST_IPV6"] = "fdbd:ff1:ce00:16:478:f476:c009:4d99"
        os.environ["BYTED_HOST_IPV4"] = ""
        endpoints = await client.lookup_name(v6_preferred_psm) + await client.lookup_name(v4_preferred_psm)
        for endpoint in endpoints:
            # v6 only
            assert isinstance(ipaddress.ip_address(endpoint.host), ipaddress.IPv6Address)

    @pytest.mark.asyncio
    async def test_async_v6_consul(self):
        client = Client()
        # /opt/tiger/consul_devbox/etc langfang.conf
        client._consul_host = "fdbd:dc01:ff:30c:e4bb:ecf5:9830:d1f9"

        e = await client.get_one("data.net.ibn_be")
        assert len(e) > 0

    def teardown_class(self):
        os.environ["BYTED_HOST_IPV4"] = ""
        os.environ["BYTED_HOST_IPV6"] = ""
