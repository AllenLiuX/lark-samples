# coding: utf-8
from __future__ import absolute_import, division, print_function, unicode_literals

import json
import os


class Cluster(object):
    """
    TQS 集群
    """

    CN = "cn"
    VA = "va"
    CN_PRIEST = "cn_priest"
    VA_PRIEST = "va_priest"
    CN_TEST = "cn_test"
    VA_TEST = "va_test"
    BOE = "boe"
    BOEI18N = "boei18n"
    LQ = "lq"
    LQ_PRIEST = "lq_priest"
    SG_LARK = "sg_lark"  # an alias of SG_LARK_ADHOC
    SG_LARK_ADHOC = "sg_lark_adhoc"
    SG_LARK_ETL = "sg_lark_etl"
    SG_EE = "sg_ee"
    DATA_HUB = "data_hub"
    ZG_CT = "zg_ct"
    GCP = "gcp"
    GCP_ETL = "gcp_etl"
    SG = "sg"
    SG_PRIEST = "sg_priest"
    ALISG = "alisg"
    ALISG_PRIEST = "alisg_priest"
    SG_TEST = "sg_test"
    OCI = "oci"
    OCI_PRIEST = "oci_priest"
    OCI_STAGING = "oci_staging"
    IND = "ind"
    IND_PRIEST = "ind_priest"
    JP_LARK = "jp_lark"
    JP_LARK_ETL = "jp_lark_etl"
    EUROPE = "europe"
    EUROPE_ETL = "europe_etl"
    CN_PPE = "cn_ppe"
    ZGPAY_ADHOC = "zgpay_adhoc"
    ZGPAY_ETL = "zgpay_etl"
    EUTTP_ADHOC = "euttp_adhoc"
    EUTTP_ETL = "euttp_etl"

    def __init__(self, cluster):
        path = "{}/conf/cluster.{}.json".format(os.path.dirname(__file__), cluster)
        assert os.path.exists(path), "load configuration file of cluster {} failed," \
                                     " file conf/cluster.{}.json not exists!".format(cluster, cluster)
        with open(path) as conf_file:
            cluster_info = json.load(conf_file)
            self.domain = cluster_info.get("domain")
            self.api_psm = cluster_info.get("api_psm")
            self.analysis_psm = cluster_info.get("analysis_psm")
            self.product_domain_suffix = cluster_info.get("product_domain_suffix")
            self.og_domain_suffix = cluster_info.get("og_domain_suffix")


CLUSTER_MAP = {
    Cluster.CN: Cluster(Cluster.CN),
    Cluster.VA: Cluster(Cluster.VA),
    Cluster.CN_PRIEST: Cluster(Cluster.CN_PRIEST),
    Cluster.VA_PRIEST: Cluster(Cluster.VA_PRIEST),
    Cluster.BOE: Cluster(Cluster.BOE),
    Cluster.BOEI18N: Cluster(Cluster.BOEI18N),
    Cluster.CN_TEST: Cluster(Cluster.CN_TEST),
    Cluster.VA_TEST: Cluster(Cluster.VA_TEST),
    Cluster.SG_LARK: Cluster(Cluster.SG_LARK),
    Cluster.SG_LARK_ADHOC: Cluster(Cluster.SG_LARK_ADHOC),
    Cluster.SG_LARK_ETL: Cluster(Cluster.SG_LARK_ETL),
    Cluster.SG_EE: Cluster(Cluster.SG_EE),
    Cluster.DATA_HUB: Cluster(Cluster.DATA_HUB),
    Cluster.ZG_CT: Cluster(Cluster.ZG_CT),
    Cluster.GCP: Cluster(Cluster.GCP),
    Cluster.GCP_ETL: Cluster(Cluster.GCP_ETL),
    Cluster.SG: Cluster(Cluster.SG),
    Cluster.SG_PRIEST: Cluster(Cluster.SG_PRIEST),
    Cluster.ALISG: Cluster(Cluster.ALISG),
    Cluster.ALISG_PRIEST: Cluster(Cluster.ALISG_PRIEST),
    Cluster.LQ: Cluster(Cluster.LQ),
    Cluster.SG_TEST: Cluster(Cluster.SG_TEST),
    Cluster.LQ_PRIEST: Cluster(Cluster.LQ_PRIEST),
    Cluster.OCI: Cluster(Cluster.OCI),
    Cluster.OCI_PRIEST: Cluster(Cluster.OCI_PRIEST),
    Cluster.OCI_STAGING: Cluster(Cluster.OCI_STAGING),
    Cluster.IND: Cluster(Cluster.IND),
    Cluster.IND_PRIEST: Cluster(Cluster.IND_PRIEST),
    Cluster.JP_LARK: Cluster(Cluster.JP_LARK),
    Cluster.JP_LARK_ETL: Cluster(Cluster.JP_LARK_ETL),
    Cluster.EUROPE: Cluster(Cluster.EUROPE),
    Cluster.EUROPE_ETL: Cluster(Cluster.EUROPE_ETL),
    Cluster.CN_PPE: Cluster(Cluster.CN_PPE),
    Cluster.ZGPAY_ADHOC: Cluster(Cluster.ZGPAY_ADHOC),
    Cluster.ZGPAY_ETL: Cluster(Cluster.ZGPAY_ETL),
    Cluster.EUTTP_ADHOC: Cluster(Cluster.EUTTP_ADHOC),
    Cluster.EUTTP_ETL: Cluster(Cluster.EUTTP_ETL),
}
