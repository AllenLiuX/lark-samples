# coding: utf-8
import logging
import os
import re
import socket
from typing import Dict, Text, Tuple

logger = logging.getLogger("bytedtqs")


def split_query_conf(query):
    # type: (Text) -> Tuple[Text, Dict[Text, Text]]
    """
    从查询语句中分离出配置信息
    :param query: 配置语句+SQL语句
    :type query: Text
    :return: SQL, 配置
    :rtype: Tuple[Text, Dict[Text, Text]]
    """
    conf = dict()
    sub_query_list = []
    for sub_query in query.strip().strip(";").split(";"):
        sub_query = sub_query.strip()
        # set command match
        set_match = re.compile(r"\s*[sS][eE][tT]\s+(.*?)=\s*(.*)\s*").match(sub_query)
        if set_match:
            conf[set_match.group(1).strip()] = set_match.group(2).strip()
            continue
        # add command match
        add_match = re.compile(r"\s*[aA][dD][dD]\s+(.*)\s*").match(sub_query)
        if add_match:
            conf["%s %s" % ("add", add_match.group(1).strip())] = ""
            continue
        sub_query_list.append(sub_query)
    return ";".join(sub_query_list), conf


def is_ipv6(ip):
    try:
        socket.inet_pton(socket.AF_INET6, ip)
    except socket.error:
        return False
    return True


def get_local_ip():
    try:
        ip = os.environ.get('MY_HOST_IP')
        if ip:
            return ip, ''
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        # connect to an non-exists server ip and port
        sock.connect(("10.255.255.255", 1))
        # get local ip address
        local_ip = sock.getsockname()[0]
        sock.close()
        return local_ip, ''
    except Exception as ex:
        logger.warn('get tqs client local ip failed {}'.format(str(ex)))
        return "unknown", str(ex)


def get_version_number():
    try:
        version_path = "{}/__version__.py".format(os.path.dirname(__file__))
        with open(version_path, "r") as version_file:
            version_content = version_file.read()
        version_globals = {}
        exec(version_content, version_globals)
        return version_globals['__version__'], ''
    except Exception as ex:
        logger.warn('get tqs client version number failed {}'.format(str(ex)))
        return "unknown", str(ex)
