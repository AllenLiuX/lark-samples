import copy
import functools
from concurrent.futures import ThreadPoolExecutor as OriginThreadPoolExcutor

from .context import global_context


def wrap_context(fn):
    context_store = copy.deepcopy(getattr(global_context.thread_local, "store", {}))
    @functools.wraps(fn)
    def wrapped(*args, **kwargs):
        global_context.thread_local.store = context_store
        return fn(*args, **kwargs)
    return wrapped


class ThreadPoolExecutor(OriginThreadPoolExcutor):
    """Drop-in replacement for ``concurrent.futures.ThreadPoolExecutor``, which will pass context to new thread.
    """
    def submit(self, fn, *args, **kwargs):
        return super(ThreadPoolExecutor, self).submit(wrap_context(fn), *args, **kwargs)
