# coding: utf-8

import threading
from typing import Any
from typing import Optional

from six.moves import collections_abc


class Context(collections_abc.MutableMapping):
    def __init__(self, name):
        # type: (str) -> None
        self.name = name
        self.thread_local = threading.local()

    def _init_store(self):
        # Used for create an empty dict for new thread
        if not hasattr(self.thread_local, 'store'):
            self.thread_local.store = {}

    def set(self, key, value):
        # type: (str, Optional[Any]) -> None
        self[key] = value

    def delete(self, key):
        # type: (str) -> bool
        try:
            del self[key]
        except KeyError:
            return False
        return True

    def __setitem__(self, key, value):
        # type: (Any, Any) -> None
        self._init_store()
        self.thread_local.store.__setitem__(key, value)

    def __getitem__(self, key):
        # type: (Any) -> Any
        self._init_store()
        return self.thread_local.store.__getitem__(key)

    def __delitem__(self, key):
        # type: (Any) -> None
        self._init_store()
        self.thread_local.store.__delitem__(key)

    def __iter__(self):
        self._init_store()
        return self.thread_local.store.__iter__()

    def __len__(self):
        self._init_store()
        return self.thread_local.store.__len__()


global_context = Context("global")


def set(key, value):
    # type: (str, Any) -> None
    global_context.set(key, value)


def get(key, default=None):
    # type: (str, Any) -> Any
    return global_context.get(key, default)


def delete(key):
    # type: (str) -> bool
    return global_context.delete(key)
