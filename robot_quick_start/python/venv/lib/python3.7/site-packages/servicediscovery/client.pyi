from typing import Any, Optional, Dict, List, Tuple
from http.client import HTTPResponse

from .cache import Cache

HEADER_CONSUL_HASH: str


def weight_choices(population, weights): ...


class Endpoint(Dict[str, Any]):
    host: str
    port: int
    tags: Dict[str, Any]


class Client(object):
    _address_family: str
    _dualstack_unique: str
    _consul_host: str
    _consul_port: int
    _cache: Cache

    def __init__(self, address_family: Optional[str] = None, dualstack_unique: Optional[str] = None) -> None: ...

    @staticmethod
    def get_host() -> str: ...

    def check_address_family(self, address_family: str): ...

    def get_address_family(self) -> str: ...

    def check_dualstack_unique(self, address_family:str, dualstack_unique: str): ...

    def set_address_family(self, address_family): ...

    def set_dualstack_unique(self, dualstack_unique): ...

    def get_dualstack_unique(self) -> str: ...

    def lookup(self, name: str, timeout: int = 3, cachetime: int = 0, cluster: Optional[str] = None,
               address_family: Optional[str] = None, dualstack_unique: Optional[str] = None) -> List[
        Endpoint]: ...

    def lookup_name(self, name: str, timeout: int = 3, cachetime: int = 0, cluster: Optional[str] = None) -> List[
        Endpoint]: ...

    def register(self, name: str, port: int, tags: Dict[str, str] = None, check_script: Optional[str] = None,
                 host: Optional[str] = None): ...

    def deregister(self, name: str, port: int, host: Optional[str] = None): ...

    def get_one(self, name: str, timeout: int = 3, cachetime: int = 10, cluster: Optional[str] = None,
                address_family: Optional[str] = None, env: str = None, envs: List[str] = None) -> Endpoint: ...

    def get_one_name(self, name: str, timeout: int = 3, cachetime: int = 10, cluster: Optional[str] = None,
                     env: str = None, envs: List[str] = None) -> Endpoint: ...

    def _get_one(self, hosts: List[Endpoint], name: str, env: str = None, envs: List[str] = None) -> Endpoint: ...

    def _lookup(self, name: str, timeout: int, cluster: str, cache: Optional[dict] = None,
                address_family: Optional[str] = None, dualstack_unique: Optional[str] = None) -> Tuple[list, str]: ...

    def _cache_key(self, name: str, cluster: Optional[str] = None,
                   address_family: Optional[str] = None, dualstack_unique: Optional[str] = None) -> Dict[
        str, Any]: ...

    def _request(self, method: str, host: str, port: int, path: str, timeout: int,
                 headers: Optional[Dict[str, str]] = None, body: Optional[str] = None) -> HTTPResponse: ...


client = Client()
set_address_family = client.set_address_family
set_dualstack_unique = client.set_dualstack_unique
lookup = client.lookup
lookup_name = client.lookup_name
register = client.register
deregister = client.deregister
get_one = client.get_one
get_one_name = client.get_one_name
