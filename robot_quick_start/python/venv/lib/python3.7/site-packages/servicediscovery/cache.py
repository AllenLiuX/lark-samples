# coding: utf-8

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import threading


class RWLock(object):
    def __init__(self):
        self._monitor = threading.Lock()
        self._exclude = threading.Lock()
        self.readers = 0

    def r_lock(self):
        with self._monitor:
            self.readers += 1
            if self.readers == 1:
                self._exclude.acquire()

    def r_unlock(self):
        with self._monitor:
            self.readers -= 1
            if self.readers == 0:
                self._exclude.release()

    def lock(self):
        self._exclude.acquire()

    def unlock(self):
        self._exclude.release()


class Cache(object):
    def __init__(self):
        self._cache = {}
        self.lock = RWLock()

    def put(self, key, value):
        try:
            self.lock.lock()
            self._cache[key] = value
        finally:
            self.lock.unlock()

    def get(self, key):
        try:
            self.lock.r_lock()
            return self._cache.get(key)
        finally:
            self.lock.r_unlock()

    def has_key(self, key):
        try:
            self.lock.r_lock()
            return key in self._cache
        finally:
            self.lock.r_unlock()
